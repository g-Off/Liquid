#if !canImport(ObjectiveC)
import XCTest

extension CaptureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CaptureTests = [
        ("test_capture", test_capture),
        ("test_capture_detects_bad_syntax", test_capture_detects_bad_syntax),
    ]
}

extension CaseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CaseTests = [
        ("test_assign_from_case", test_assign_from_case),
        ("test_case", test_case),
        ("test_case_on_length_with_else", test_case_on_length_with_else),
        ("test_case_on_size", test_case_on_size),
        ("test_case_on_size_with_else", test_case_on_size_with_else),
        ("test_case_when_comma", test_case_when_comma),
        ("test_case_when_or", test_case_when_or),
        ("test_case_with_else", test_case_with_else),
    ]
}

extension CycleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CycleTests = [
        ("test_cycle", test_cycle),
        ("test_multiple_cycles", test_multiple_cycles),
        ("test_multiple_named_cycles", test_multiple_named_cycles),
        ("test_multiple_named_cycles_with_names_from_context", test_multiple_named_cycles_with_names_from_context),
    ]
}

extension FilterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FilterTests = [
        ("testAbs", testAbs),
        ("testAppendToString", testAppendToString),
        ("testCapitalize", testCapitalize),
        ("testCeil", testCeil),
        ("testCompact", testCompact),
        ("testConcat", testConcat),
        ("testDate", testDate),
        ("testDefault", testDefault),
        ("testDividedBy", testDividedBy),
        ("testDowncase", testDowncase),
        ("testEscape", testEscape),
        ("testEscapeOnce", testEscapeOnce),
        ("testFirst", testFirst),
        ("testFloor", testFloor),
        ("testJoin", testJoin),
        ("testLast", testLast),
        ("testLstrip", testLstrip),
        ("testMap", testMap),
        ("testMinus", testMinus),
        ("testModulo", testModulo),
        ("testNewlineToBr", testNewlineToBr),
        ("testPlus", testPlus),
        ("testPrepend", testPrepend),
        ("testRemove", testRemove),
        ("testRemoveFirst", testRemoveFirst),
        ("testReplace", testReplace),
        ("testReplaceFirst", testReplaceFirst),
        ("testReverse", testReverse),
        ("testRound", testRound),
        ("testRstrip", testRstrip),
        ("testSize", testSize),
        ("testSlice", testSlice),
        ("testSort", testSort),
        ("testSortNatural", testSortNatural),
        ("testSplit", testSplit),
        ("testStrip", testStrip),
        ("testStripHtml", testStripHtml),
        ("testStripNewLines", testStripNewLines),
        ("testTimes", testTimes),
        ("testTruncate", testTruncate),
        ("testTruncateWords", testTruncateWords),
        ("testUnique", testUnique),
        ("testUpcase", testUpcase),
        ("testUrlDecode", testUrlDecode),
        ("testUrlEncode", testUrlEncode),
    ]
}

extension ForTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ForTests = [
        ("test_for", test_for),
        ("test_for_and_if", test_for_and_if),
        ("test_for_else", test_for_else),
        ("test_for_helpers", test_for_helpers),
        ("test_for_reversed", test_for_reversed),
        ("test_for_with_break", test_for_with_break),
        ("test_for_with_continue", test_for_with_continue),
        ("test_for_with_range", test_for_with_range),
        ("test_for_with_variable_range", test_for_with_variable_range),
        ("test_limiting", test_limiting),
    ]
}

extension IfElseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IfElseTests = [
        ("test_comparison_of_strings_containing_and_or_or", test_comparison_of_strings_containing_and_or_or),
        ("test_comparisons_on_null", test_comparisons_on_null),
        ("test_else_if", test_else_if),
        ("test_hash_miss_generates_false", test_hash_miss_generates_false),
        ("test_if", test_if),
        ("test_if_and", test_if_and),
        ("test_if_boolean", test_if_boolean),
        ("test_if_else", test_if_else),
        ("test_if_from_variable", test_if_from_variable),
        ("test_if_or", test_if_or),
        ("test_if_or_with_operators", test_if_or_with_operators),
        ("test_literal_comparisons", test_literal_comparisons),
        ("test_nested_if", test_nested_if),
        ("test_unended_if", test_unended_if),
    ]
}

extension LexerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LexerTests = [
        ("testTextToken", testTextToken),
    ]
}

extension LiquidTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LiquidTests = [
        ("testExample", testExample),
    ]
}

extension ValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueTests = [
        ("testComparable", testComparable),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CaptureTests.__allTests__CaptureTests),
        testCase(CaseTests.__allTests__CaseTests),
        testCase(CycleTests.__allTests__CycleTests),
        testCase(FilterTests.__allTests__FilterTests),
        testCase(ForTests.__allTests__ForTests),
        testCase(IfElseTests.__allTests__IfElseTests),
        testCase(LexerTests.__allTests__LexerTests),
        testCase(LiquidTests.__allTests__LiquidTests),
        testCase(ValueTests.__allTests__ValueTests),
    ]
}
#endif
